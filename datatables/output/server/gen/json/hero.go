
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package cfg;


import "errors"

type hero struct {
    Id int32
    Name string
    Camp int32
    Type int32
    Atk int32
    Int int32
    Def int32
    Hp int32
    Crt int32
    AttackSpeed int32
    BattleRange int32
    Personality int32
    Sex int32
    Speed int32
    Skill []int32
    FitSkill []int32
    SoldierId int32
    Skin int32
    HeroType int32
    Initialstar int32
    MergeItem int32
    Power int32
    Element int32
    HeroArea int32
}

const TypeId_hero = 3198970

func (*hero) GetTypeId() int32 {
    return 3198970
}

func Newhero(_buf map[string]interface{}) (_v *hero, err error) {
    _v = &hero{}
    { var _ok_ bool; var __json_id__ interface{}; if __json_id__, _ok_ = _buf["id"]; !_ok_ || __json_id__ == nil { err = errors.New("id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Id = __x__ }}
    { var _ok_ bool; var __json_name__ interface{}; if __json_name__, _ok_ = _buf["name"]; !_ok_ || __json_name__ == nil { err = errors.New("name error"); return } else { var __x__ string;  {  if __x__, _ok_ = __json_name__.(string); !_ok_ { err = errors.New("__x__ error"); return } }; _v.Name = __x__ }}
    { var _ok_ bool; var __json_camp__ interface{}; if __json_camp__, _ok_ = _buf["camp"]; !_ok_ || __json_camp__ == nil { err = errors.New("camp error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_camp__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Camp = __x__ }}
    { var _ok_ bool; var __json_type__ interface{}; if __json_type__, _ok_ = _buf["type"]; !_ok_ || __json_type__ == nil { err = errors.New("type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Type = __x__ }}
    { var _ok_ bool; var __json_atk__ interface{}; if __json_atk__, _ok_ = _buf["atk"]; !_ok_ || __json_atk__ == nil { err = errors.New("atk error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_atk__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Atk = __x__ }}
    { var _ok_ bool; var __json_int__ interface{}; if __json_int__, _ok_ = _buf["int"]; !_ok_ || __json_int__ == nil { err = errors.New("int error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_int__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Int = __x__ }}
    { var _ok_ bool; var __json_def__ interface{}; if __json_def__, _ok_ = _buf["def"]; !_ok_ || __json_def__ == nil { err = errors.New("def error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_def__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Def = __x__ }}
    { var _ok_ bool; var __json_hp__ interface{}; if __json_hp__, _ok_ = _buf["hp"]; !_ok_ || __json_hp__ == nil { err = errors.New("hp error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_hp__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Hp = __x__ }}
    { var _ok_ bool; var __json_crt__ interface{}; if __json_crt__, _ok_ = _buf["crt"]; !_ok_ || __json_crt__ == nil { err = errors.New("crt error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_crt__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Crt = __x__ }}
    { var _ok_ bool; var __json_attack_speed__ interface{}; if __json_attack_speed__, _ok_ = _buf["attack_speed"]; !_ok_ || __json_attack_speed__ == nil { err = errors.New("attack_speed error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_attack_speed__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.AttackSpeed = __x__ }}
    { var _ok_ bool; var __json_battle_range__ interface{}; if __json_battle_range__, _ok_ = _buf["battle_range"]; !_ok_ || __json_battle_range__ == nil { err = errors.New("battle_range error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_battle_range__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.BattleRange = __x__ }}
    { var _ok_ bool; var __json_personality__ interface{}; if __json_personality__, _ok_ = _buf["personality"]; !_ok_ || __json_personality__ == nil { err = errors.New("personality error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_personality__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Personality = __x__ }}
    { var _ok_ bool; var __json_sex__ interface{}; if __json_sex__, _ok_ = _buf["sex"]; !_ok_ || __json_sex__ == nil { err = errors.New("sex error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_sex__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Sex = __x__ }}
    { var _ok_ bool; var __json_speed__ interface{}; if __json_speed__, _ok_ = _buf["speed"]; !_ok_ || __json_speed__ == nil { err = errors.New("speed error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_speed__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Speed = __x__ }}
    { var _ok_ bool; var __json_skill__ interface{}; if __json_skill__, _ok_ = _buf["skill"]; !_ok_ || __json_skill__ == nil { err = errors.New("skill error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_skill__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.Skill = __x__ }}
    { var _ok_ bool; var __json_fit_skill__ interface{}; if __json_fit_skill__, _ok_ = _buf["fit_skill"]; !_ok_ || __json_fit_skill__ == nil { err = errors.New("fit_skill error"); return } else { var __x__ []int32;  {
                    var _arr0_ []interface{}
                    var _ok0_ bool
                    if _arr0_, _ok0_ = (__json_fit_skill__).([]interface{}); !_ok0_ { err = errors.New("__x__ error"); return }
    
                    __x__ = make([]int32, 0, len(_arr0_))
                    
                    for _, _e0_ := range _arr0_ {
                        var _list_v0_ int32
                        { var _ok_ bool; var _x_ float64; if _x_, _ok_ = _e0_.(float64); !_ok_ { err = errors.New("_list_v0_ error"); return }; _list_v0_ = int32(_x_) }
                        __x__ = append(__x__, _list_v0_)
                    }
                }
    ; _v.FitSkill = __x__ }}
    { var _ok_ bool; var __json_soldier_id__ interface{}; if __json_soldier_id__, _ok_ = _buf["soldier_id"]; !_ok_ || __json_soldier_id__ == nil { err = errors.New("soldier_id error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_soldier_id__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.SoldierId = __x__ }}
    { var _ok_ bool; var __json_skin__ interface{}; if __json_skin__, _ok_ = _buf["skin"]; !_ok_ || __json_skin__ == nil { err = errors.New("skin error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_skin__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Skin = __x__ }}
    { var _ok_ bool; var __json_hero_type__ interface{}; if __json_hero_type__, _ok_ = _buf["hero_type"]; !_ok_ || __json_hero_type__ == nil { err = errors.New("hero_type error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_hero_type__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HeroType = __x__ }}
    { var _ok_ bool; var __json_initialstar__ interface{}; if __json_initialstar__, _ok_ = _buf["initialstar"]; !_ok_ || __json_initialstar__ == nil { err = errors.New("initialstar error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_initialstar__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Initialstar = __x__ }}
    { var _ok_ bool; var __json_merge_item__ interface{}; if __json_merge_item__, _ok_ = _buf["merge_item"]; !_ok_ || __json_merge_item__ == nil { err = errors.New("merge_item error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_merge_item__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.MergeItem = __x__ }}
    { var _ok_ bool; var __json_power__ interface{}; if __json_power__, _ok_ = _buf["power"]; !_ok_ || __json_power__ == nil { err = errors.New("power error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_power__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Power = __x__ }}
    { var _ok_ bool; var __json_element__ interface{}; if __json_element__, _ok_ = _buf["element"]; !_ok_ || __json_element__ == nil { err = errors.New("element error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_element__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.Element = __x__ }}
    { var _ok_ bool; var __json_hero_area__ interface{}; if __json_hero_area__, _ok_ = _buf["hero_area"]; !_ok_ || __json_hero_area__ == nil { err = errors.New("hero_area error"); return } else { var __x__ int32;  { var _ok_ bool; var _x_ float64; if _x_, _ok_ = __json_hero_area__.(float64); !_ok_ { err = errors.New("__x__ error"); return }; __x__ = int32(_x_) }; _v.HeroArea = __x__ }}
    return
}

