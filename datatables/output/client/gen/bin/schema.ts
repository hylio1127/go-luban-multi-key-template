
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


import ByteBuf from '../bright/serialization/ByteBuf'





export namespace city {
export class area {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.areaId = _buf_.ReadInt()
        this.unlockLv = _buf_.ReadInt()
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.unlockCost = new Map<number, number>(); for(let i = 0 ; i < n ; i++) { let _k0; _k0 = _buf_.ReadInt();  let _v0;  _v0 = _buf_.ReadInt(); this.unlockCost.set(_k0, _v0);  } }
        this.autoStage = _buf_.ReadInt()
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 区域ID
     */
    readonly areaId: number
    /**
     * 解锁等级
     */
    readonly unlockLv: number
    /**
     * 资源id
     */
    readonly unlockCost: Map<number, number>
    readonly autoStage: number

    resolve(tables:Tables) {
        
        
        
        
        
    }
}

}


export namespace city {
export class build {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.buildType = _buf_.ReadInt()
        this.belongBuild = _buf_.ReadInt()
        this.name = _buf_.ReadString()
        this.isBuild = _buf_.ReadBool()
        this.requireLv = _buf_.ReadInt()
        this.isUpgrade = _buf_.ReadBool()
        this.isAppoint = _buf_.ReadBool()
        this.configName = _buf_.ReadString()
    }

    /**
     * ID
     */
    readonly id: number
    /**
     * 建筑类型ID
     */
    readonly buildType: number
    /**
     * 所属建筑
     */
    readonly belongBuild: number
    /**
     * 名称
     */
    readonly name: string
    /**
     * 是否可建造
     */
    readonly isBuild: boolean
    /**
     * 需要玩家等级
     */
    readonly requireLv: number
    /**
     * 是否可升级
     */
    readonly isUpgrade: boolean
    /**
     * 是否需要指定位置
     */
    readonly isAppoint: boolean
    /**
     * 配置名称
     */
    readonly configName: string

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
    }
}

}



export class hero {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.name = _buf_.ReadString()
        this.camp = _buf_.ReadInt()
        this.quality = _buf_.ReadString()
        this.type = _buf_.ReadInt()
        this.atk = _buf_.ReadInt()
        this.int = _buf_.ReadInt()
        this.def = _buf_.ReadInt()
        this.hp = _buf_.ReadInt()
        this.crt = _buf_.ReadInt()
        this.attackSpeed = _buf_.ReadInt()
        this.battleRange = _buf_.ReadInt()
        this.personality = _buf_.ReadInt()
        this.sex = _buf_.ReadInt()
        this.collisionSize = _buf_.ReadInt()
        this.speed = _buf_.ReadInt()
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.skill = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.ReadInt(); this.skill.push(_e0);}}
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.fitSkill = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.ReadInt(); this.fitSkill.push(_e0);}}
        this.soldierId = _buf_.ReadInt()
        this.skin = _buf_.ReadInt()
        this.heroType = _buf_.ReadInt()
        this.initialstar = _buf_.ReadInt()
        this.mergeItem = _buf_.ReadInt()
        this.power = _buf_.ReadInt()
        this.element = _buf_.ReadInt()
        this.heroArea = _buf_.ReadInt()
    }

    /**
     * 英雄ID
     */
    readonly id: number
    /**
     * 名称
     */
    readonly name: string
    /**
     * 阵营
     */
    readonly camp: number
    /**
     * 稀有度
     */
    readonly quality: string
    /**
     * 卡牌类型
     */
    readonly type: number
    /**
     * 武力
     */
    readonly atk: number
    /**
     * 智力
     */
    readonly int: number
    /**
     * 耐力
     */
    readonly def: number
    /**
     * 体质
     */
    readonly hp: number
    /**
     * 暴击率
     */
    readonly crt: number
    /**
     * 攻击速度
     */
    readonly attackSpeed: number
    /**
     * 攻击范围（像素）
     */
    readonly battleRange: number
    /**
     * 性格
     */
    readonly personality: number
    /**
     * 性别
     */
    readonly sex: number
    /**
     * 碰撞大小
     */
    readonly collisionSize: number
    /**
     * 移速
     */
    readonly speed: number
    /**
     * 技能
     */
    readonly skill: number[]
    /**
     * 合体技能
     */
    readonly fitSkill: number[]
    /**
     * 带领兵种
     */
    readonly soldierId: number
    /**
     * 皮肤ID
     */
    readonly skin: number
    /**
     * 英雄类型
     */
    readonly heroType: number
    /**
     * 初始星级
     */
    readonly initialstar: number
    /**
     * 武将碎片
     */
    readonly mergeItem: number
    /**
     * 初始战力
     */
    readonly power: number
    /**
     * 五行元素
     */
    readonly element: number
    /**
     * 武将出生地
     */
    readonly heroArea: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class item {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.name = _buf_.ReadString()
        this.des = _buf_.ReadString()
        this.type = _buf_.ReadInt()
        this.castleLevel = _buf_.ReadInt()
        this.quality = _buf_.ReadInt()
        this.icon = _buf_.ReadString()
        this.canUse = _buf_.ReadBool()
        this.tab = _buf_.ReadInt()
        this.sort = _buf_.ReadInt()
        this.haveLimit = _buf_.ReadBool()
        this.autoUse = _buf_.ReadBool()
        this.maxUseAmount = _buf_.ReadInt()
        this.useSuccessTip = _buf_.ReadInt()
        this.openType = _buf_.ReadInt()
        this.openValue = _buf_.ReadInt()
        this.stackNum = _buf_.ReadInt()
        this.heroId = _buf_.ReadInt()
        this.mergeItem = _buf_.ReadInt()
    }

    /**
     * 道具ID
     */
    readonly id: number
    /**
     * 道具名
     */
    readonly name: string
    /**
     * 道具说明
     */
    readonly des: string
    /**
     * 道具种类
     */
    readonly type: number
    /**
     * 玩家使用等级
     */
    readonly castleLevel: number
    /**
     * 品质
     */
    readonly quality: number
    /**
     * 图标
     */
    readonly icon: string
    /**
     * 是否可以使用
     */
    readonly canUse: boolean
    /**
     * 在背包何处显示
     */
    readonly tab: number
    /**
     * 背包中显示优先级
     */
    readonly sort: number
    /**
     * 存储上限
     */
    readonly haveLimit: boolean
    /**
     * 是否自动使用
     */
    readonly autoUse: boolean
    /**
     * 最大使用数量
     */
    readonly maxUseAmount: number
    /**
     * 使用成功提示
     */
    readonly useSuccessTip: number
    /**
     * 是否是礼包
     */
    readonly openType: number
    /**
     * 礼包ID
     */
    readonly openValue: number
    /**
     * 最大堆叠数
     */
    readonly stackNum: number
    /**
     * 英雄ID
     */
    readonly heroId: number
    /**
     * 可合成道具
     */
    readonly mergeItem: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}




export namespace lover {
export class Pocker {

    constructor(_buf_: ByteBuf) {
        this.holeCards = _buf_.ReadString()
        this.strength = _buf_.ReadInt()
        this.flop1AiWinCheck = _buf_.ReadInt()
        this.flop1AiWinRaise = _buf_.ReadInt()
        this.flop1AiWinRaiseSize = _buf_.ReadInt()
        this.flop1AiLoseCheck = _buf_.ReadInt()
        this.flop1AiLoseRaise = _buf_.ReadInt()
        this.flop1AiLoseRaiseSize = _buf_.ReadInt()
        this.flop2AiWinFold = _buf_.ReadInt()
        this.flop2AiWinCall = _buf_.ReadInt()
        this.flop2AiWinRaise = _buf_.ReadInt()
        this.flop2AiWinRaiseSize = _buf_.ReadInt()
        this.flop2AiLoseFold = _buf_.ReadInt()
        this.flop2AiLoseCall = _buf_.ReadInt()
        this.flop2AiLoseRaise = _buf_.ReadInt()
        this.flop2AiLoseRaiseSize = _buf_.ReadInt()
        this.other1AiWinCheck = _buf_.ReadInt()
        this.other1AiWinBet = _buf_.ReadInt()
        this.other1AiWinBetSize = _buf_.ReadInt()
        this.other1AiLoseCheck = _buf_.ReadInt()
        this.other1AiLoseBet = _buf_.ReadInt()
        this.other1AiLoseBetSize = _buf_.ReadInt()
        this.other2AiWinFold = _buf_.ReadInt()
        this.other2AiWinCall = _buf_.ReadInt()
        this.other2AiWinRaise = _buf_.ReadInt()
        this.other2AiWinRaiseSize = _buf_.ReadInt()
        this.other2AiLoseFold = _buf_.ReadInt()
        this.other2AiLoseCall = _buf_.ReadInt()
        this.other2AiLoseRaise = _buf_.ReadInt()
        this.other2AiLoseRaiseSize = _buf_.ReadInt()
    }

    /**
     * 手牌
     */
    readonly holeCards: string
    /**
     * 强度值
     */
    readonly strength: number
    /**
     * 翻牌轮AI赢-过牌万分比
     */
    readonly flop1AiWinCheck: number
    /**
     * 翻牌轮AI赢-加注万分比
     */
    readonly flop1AiWinRaise: number
    /**
     * 翻牌轮AI赢-极限加倍数
     */
    readonly flop1AiWinRaiseSize: number
    /**
     * 翻牌轮AI输-过牌万分比
     */
    readonly flop1AiLoseCheck: number
    /**
     * 翻牌轮AI输-加注万分比
     */
    readonly flop1AiLoseRaise: number
    /**
     * 翻牌轮AI输-极限加倍数
     */
    readonly flop1AiLoseRaiseSize: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai弃牌万分比
     */
    readonly flop2AiWinFold: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai跟注万分比
     */
    readonly flop2AiWinCall: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai再加注万分比
     */
    readonly flop2AiWinRaise: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai再加注极限倍数
     */
    readonly flop2AiWinRaiseSize: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai弃牌万分比
     */
    readonly flop2AiLoseFold: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai跟注万分比
     */
    readonly flop2AiLoseCall: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai再加注万分比
     */
    readonly flop2AiLoseRaise: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai极限再加倍数
     */
    readonly flop2AiLoseRaiseSize: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI过牌万分比
     */
    readonly other1AiWinCheck: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI下注万分比
     */
    readonly other1AiWinBet: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI下注极限倍数
     */
    readonly other1AiWinBetSize: number
    /**
     * 其它轮次AI输-玩家过牌后-AI过牌万分比
     */
    readonly other1AiLoseCheck: number
    /**
     * 其它轮次AI输-玩家过牌后-AI下注万分比
     */
    readonly other1AiLoseBet: number
    /**
     * 其它轮次AI输-玩家过牌后-AI下注极限倍数
     */
    readonly other1AiLoseBetSize: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI过牌万分比
     */
    readonly other2AiWinFold: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI跟注万分比
     */
    readonly other2AiWinCall: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI加注万分比
     */
    readonly other2AiWinRaise: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI加注极限倍数
     */
    readonly other2AiWinRaiseSize: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI过牌万分比
     */
    readonly other2AiLoseFold: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI跟注万分比
     */
    readonly other2AiLoseCall: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI加注万分比
     */
    readonly other2AiLoseRaise: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI加注极限倍数
     */
    readonly other2AiLoseRaiseSize: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}

}



export class task_cfg {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.name = _buf_.ReadString()
        this.des = _buf_.ReadString()
        this.checkType = _buf_.ReadInt()
        this.targetType = _buf_.ReadInt()
        this.targetId = _buf_.ReadInt()
        this.targetNum = _buf_.ReadInt()
        this.jumpType = _buf_.ReadInt()
        this.jumpValve = _buf_.ReadInt()
        this.rewardExp = _buf_.ReadInt()
        this.unlockLv = _buf_.ReadInt()
        this.resetType = _buf_.ReadInt()
        this.sort = _buf_.ReadInt()
        this.priceLv = _buf_.ReadInt()
        this.guildBubble = _buf_.ReadInt()
        this.taskGuiild = _buf_.ReadInt()
        this.preTask = _buf_.ReadInt()
    }

    /**
     * 任务ID
     */
    readonly id: number
    /**
     * 任务名称
     */
    readonly name: string
    /**
     * 任务介绍
     */
    readonly des: string
    /**
     * 完成类型
     */
    readonly checkType: number
    /**
     * 目标类型
     */
    readonly targetType: number
    /**
     * 目标ID
     */
    readonly targetId: number
    /**
     * 目标数量
     */
    readonly targetNum: number
    /**
     * 跳转类型
     */
    readonly jumpType: number
    /**
     * 跳转目标
     */
    readonly jumpValve: number
    /**
     * 奖励经验
     */
    readonly rewardExp: number
    /**
     * 解锁等级
     */
    readonly unlockLv: number
    /**
     * 重置类型
     */
    readonly resetType: number
    /**
     * 类型
     */
    readonly sort: number
    /**
     * 稀有度
     */
    readonly priceLv: number
    /**
     * 引导气泡
     */
    readonly guildBubble: number
    /**
     * 任务指引
     */
    readonly taskGuiild: number
    /**
     * 前置任务
     */
    readonly preTask: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class vector2 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vector3 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
        this.z = _buf_.ReadFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vector4 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
        this.z = _buf_.ReadFloat()
        this.w = _buf_.ReadFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}





export namespace lover {
export class TbPocker {
    private _dataMap: Map<string, lover.Pocker>
    private _dataList: lover.Pocker[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<string, lover.Pocker>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: lover.Pocker
            _v = new lover.Pocker(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.holeCards, _v)
        }
    }

    getDataMap(): Map<string, lover.Pocker> { return this._dataMap; }
    getDataList(): lover.Pocker[] { return this._dataList; }

    get(key: string): lover.Pocker | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



export class Tbhero {
    private _dataMap: Map<number, hero>
    private _dataList: hero[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, hero>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: hero
            _v = new hero(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, hero> { return this._dataMap; }
    getDataList(): hero[] { return this._dataList; }

    get(key: number): hero | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbitem {
    private _dataMap: Map<number, item>
    private _dataList: item[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, item>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: item
            _v = new item(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, item> { return this._dataMap; }
    getDataList(): item[] { return this._dataList; }

    get(key: number): item | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbtask_cfg {
    private _dataMap: Map<number, task_cfg>
    private _dataList: task_cfg[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, task_cfg>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: task_cfg
            _v = new task_cfg(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, task_cfg> { return this._dataMap; }
    getDataList(): task_cfg[] { return this._dataList; }

    get(key: number): task_cfg | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}



export namespace city {
export class Tbarea {
    private _dataMap: Map<number, city.area>
    private _dataList: city.area[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, city.area>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: city.area
            _v = new city.area(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, city.area> { return this._dataMap; }
    getDataList(): city.area[] { return this._dataList; }

    get(key: number): city.area | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace city {
export class Tbbuild {
    private _dataMap: Map<number, city.build>
    private _dataList: city.build[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, city.build>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: city.build
            _v = new city.build(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, city.build> { return this._dataMap; }
    getDataList(): city.build[] { return this._dataList; }

    get(key: number): city.build | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



type ByteBufLoader = (file: string) => ByteBuf

export class Tables {
    private _TbPocker: lover.TbPocker
    get TbPocker(): lover.TbPocker  { return this._TbPocker;}
    private _Tbhero: Tbhero
    get Tbhero(): Tbhero  { return this._Tbhero;}
    private _Tbitem: Tbitem
    get Tbitem(): Tbitem  { return this._Tbitem;}
    private _Tbtask_cfg: Tbtask_cfg
    get Tbtask_cfg(): Tbtask_cfg  { return this._Tbtask_cfg;}
    private _Tbarea: city.Tbarea
    get Tbarea(): city.Tbarea  { return this._Tbarea;}
    private _Tbbuild: city.Tbbuild
    get Tbbuild(): city.Tbbuild  { return this._Tbbuild;}

    static getTableNames(): string[] {
        let names: string[] = [];
        names.push('lover_tbpocker');
        names.push('tbhero');
        names.push('tbitem');
        names.push('tbtask_cfg');
        names.push('city_tbarea');
        names.push('city_tbbuild');
        return names;
    }

    constructor(loader: ByteBufLoader) {
        this._TbPocker = new lover.TbPocker(loader('lover_tbpocker'))
        this._Tbhero = new Tbhero(loader('tbhero'))
        this._Tbitem = new Tbitem(loader('tbitem'))
        this._Tbtask_cfg = new Tbtask_cfg(loader('tbtask_cfg'))
        this._Tbarea = new city.Tbarea(loader('city_tbarea'))
        this._Tbbuild = new city.Tbbuild(loader('city_tbbuild'))

        this._TbPocker.resolve(this)
        this._Tbhero.resolve(this)
        this._Tbitem.resolve(this)
        this._Tbtask_cfg.resolve(this)
        this._Tbarea.resolve(this)
        this._Tbbuild.resolve(this)
    }
}

