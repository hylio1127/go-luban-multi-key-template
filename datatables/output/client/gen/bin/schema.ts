
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


import ByteBuf from '../bright/serialization/ByteBuf'





export namespace demo {
export class Item {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.name = _buf_.ReadString()
        this.desc = _buf_.ReadString()
        this.count = _buf_.ReadInt()
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 名称
     */
    readonly name: string
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 个数
     */
    readonly count: number

    resolve(tables:Tables) {
        
        
        
        
    }
}

}



export class hero {

    constructor(_buf_: ByteBuf) {
        this.id = _buf_.ReadInt()
        this.name = _buf_.ReadString()
        this.camp = _buf_.ReadInt()
        this.quality = _buf_.ReadString()
        this.type = _buf_.ReadInt()
        this.atk = _buf_.ReadInt()
        this.int = _buf_.ReadInt()
        this.def = _buf_.ReadInt()
        this.hp = _buf_.ReadInt()
        this.crt = _buf_.ReadInt()
        this.attackSpeed = _buf_.ReadInt()
        this.battleRange = _buf_.ReadInt()
        this.personality = _buf_.ReadInt()
        this.sex = _buf_.ReadInt()
        this.collisionSize = _buf_.ReadInt()
        this.speed = _buf_.ReadInt()
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.skill = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.ReadInt(); this.skill.push(_e0);}}
        { let n = Math.min(_buf_.ReadSize(), _buf_.Size); this.fitSkill = []; for(let i = 0 ; i < n ; i++) { let _e0 ;_e0 = _buf_.ReadInt(); this.fitSkill.push(_e0);}}
        this.soldierId = _buf_.ReadInt()
        this.skin = _buf_.ReadInt()
        this.heroType = _buf_.ReadInt()
        this.initialstar = _buf_.ReadInt()
        this.mergeItem = _buf_.ReadInt()
        this.power = _buf_.ReadInt()
        this.element = _buf_.ReadInt()
        this.heroArea = _buf_.ReadInt()
    }

    /**
     * 英雄ID
     */
    readonly id: number
    /**
     * 名称
     */
    readonly name: string
    /**
     * 阵营
     */
    readonly camp: number
    /**
     * 稀有度
     */
    readonly quality: string
    /**
     * 卡牌类型
     */
    readonly type: number
    /**
     * 武力
     */
    readonly atk: number
    /**
     * 智力
     */
    readonly int: number
    /**
     * 耐力
     */
    readonly def: number
    /**
     * 体质
     */
    readonly hp: number
    /**
     * 暴击率
     */
    readonly crt: number
    /**
     * 攻击速度
     */
    readonly attackSpeed: number
    /**
     * 攻击范围（像素）
     */
    readonly battleRange: number
    /**
     * 性格
     */
    readonly personality: number
    /**
     * 性别
     */
    readonly sex: number
    /**
     * 碰撞大小
     */
    readonly collisionSize: number
    /**
     * 移速
     */
    readonly speed: number
    /**
     * 技能
     */
    readonly skill: number[]
    /**
     * 合体技能
     */
    readonly fitSkill: number[]
    /**
     * 带领兵种
     */
    readonly soldierId: number
    /**
     * 皮肤ID
     */
    readonly skin: number
    /**
     * 英雄类型
     */
    readonly heroType: number
    /**
     * 初始星级
     */
    readonly initialstar: number
    /**
     * 武将碎片
     */
    readonly mergeItem: number
    /**
     * 初始战力
     */
    readonly power: number
    /**
     * 五行元素
     */
    readonly element: number
    /**
     * 武将出生地
     */
    readonly heroArea: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class loverpocker {

    constructor(_buf_: ByteBuf) {
        this.holeCards = _buf_.ReadString()
        this.strength = _buf_.ReadInt()
        this.flop1AiWinCheck = _buf_.ReadInt()
        this.flop1AiWinRaise = _buf_.ReadInt()
        this.flop1AiWinRaiseSize = _buf_.ReadInt()
        this.flop1AiLoseCheck = _buf_.ReadInt()
        this.flop1AiLoseRaise = _buf_.ReadInt()
        this.flop1AiLoseRaiseSize = _buf_.ReadInt()
        this.flop2AiWinFold = _buf_.ReadInt()
        this.flop2AiWinCall = _buf_.ReadInt()
        this.flop2AiWinRaise = _buf_.ReadInt()
        this.flop2AiWinRaiseSize = _buf_.ReadInt()
        this.flop2AiLoseFold = _buf_.ReadInt()
        this.flop2AiLoseCall = _buf_.ReadInt()
        this.flop2AiLoseRaise = _buf_.ReadInt()
        this.flop2AiLoseRaiseSize = _buf_.ReadInt()
        this.other1AiWinCheck = _buf_.ReadInt()
        this.other1AiWinBet = _buf_.ReadInt()
        this.other1AiWinBetSize = _buf_.ReadInt()
        this.other1AiLoseCheck = _buf_.ReadInt()
        this.other1AiLoseBet = _buf_.ReadInt()
        this.other1AiLoseBetSize = _buf_.ReadInt()
        this.other2AiWinFold = _buf_.ReadInt()
        this.other2AiWinCall = _buf_.ReadInt()
        this.other2AiWinRaise = _buf_.ReadInt()
        this.other2AiWinRaiseSize = _buf_.ReadInt()
        this.other2AiLoseFold = _buf_.ReadInt()
        this.other2AiLoseCall = _buf_.ReadInt()
        this.other2AiLoseRaise = _buf_.ReadInt()
        this.other2AiLoseRaiseSize = _buf_.ReadInt()
    }

    /**
     * 手牌
     */
    readonly holeCards: string
    /**
     * 强度值
     */
    readonly strength: number
    /**
     * 翻牌轮AI赢-过牌万分比
     */
    readonly flop1AiWinCheck: number
    /**
     * 翻牌轮AI赢-加注万分比
     */
    readonly flop1AiWinRaise: number
    /**
     * 翻牌轮AI赢-极限加倍数
     */
    readonly flop1AiWinRaiseSize: number
    /**
     * 翻牌轮AI输-过牌万分比
     */
    readonly flop1AiLoseCheck: number
    /**
     * 翻牌轮AI输-加注万分比
     */
    readonly flop1AiLoseRaise: number
    /**
     * 翻牌轮AI输-极限加倍数
     */
    readonly flop1AiLoseRaiseSize: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai弃牌万分比
     */
    readonly flop2AiWinFold: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai跟注万分比
     */
    readonly flop2AiWinCall: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai再加注万分比
     */
    readonly flop2AiWinRaise: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai再加注极限倍数
     */
    readonly flop2AiWinRaiseSize: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai弃牌万分比
     */
    readonly flop2AiLoseFold: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai跟注万分比
     */
    readonly flop2AiLoseCall: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai再加注万分比
     */
    readonly flop2AiLoseRaise: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai极限再加倍数
     */
    readonly flop2AiLoseRaiseSize: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI过牌万分比
     */
    readonly other1AiWinCheck: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI下注万分比
     */
    readonly other1AiWinBet: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI下注极限倍数
     */
    readonly other1AiWinBetSize: number
    /**
     * 其它轮次AI输-玩家过牌后-AI过牌万分比
     */
    readonly other1AiLoseCheck: number
    /**
     * 其它轮次AI输-玩家过牌后-AI下注万分比
     */
    readonly other1AiLoseBet: number
    /**
     * 其它轮次AI输-玩家过牌后-AI下注极限倍数
     */
    readonly other1AiLoseBetSize: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI过牌万分比
     */
    readonly other2AiWinFold: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI跟注万分比
     */
    readonly other2AiWinCall: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI加注万分比
     */
    readonly other2AiWinRaise: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI加注极限倍数
     */
    readonly other2AiWinRaiseSize: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI过牌万分比
     */
    readonly other2AiLoseFold: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI跟注万分比
     */
    readonly other2AiLoseCall: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI加注万分比
     */
    readonly other2AiLoseRaise: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI加注极限倍数
     */
    readonly other2AiLoseRaiseSize: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class vector2 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vector3 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
        this.z = _buf_.ReadFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vector4 {

    constructor(_buf_: ByteBuf) {
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
        this.z = _buf_.ReadFloat()
        this.w = _buf_.ReadFloat()
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}





export namespace demo {
export class TbItem {
    private _dataMap: Map<number, demo.Item>
    private _dataList: demo.Item[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, demo.Item>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: demo.Item
            _v = new demo.Item(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, demo.Item> { return this._dataMap; }
    getDataList(): demo.Item[] { return this._dataList; }

    get(key: number): demo.Item | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



export class lover_poker {
    private _dataMap: Map<string, loverpocker>
    private _dataList: loverpocker[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<string, loverpocker>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: loverpocker
            _v = new loverpocker(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.holeCards, _v)
        }
    }

    getDataMap(): Map<string, loverpocker> { return this._dataMap; }
    getDataList(): loverpocker[] { return this._dataList; }

    get(key: string): loverpocker | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbhero {
    private _dataMap: Map<number, hero>
    private _dataList: hero[]
    constructor(_buf_: ByteBuf) {
        this._dataMap = new Map<number, hero>()
        this._dataList = []
        for(let n = _buf_.ReadInt(); n > 0; n--) {
            let _v: hero
            _v = new hero(_buf_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, hero> { return this._dataMap; }
    getDataList(): hero[] { return this._dataList; }

    get(key: number): hero | undefined {
        return this._dataMap.get(key); 
    }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




type ByteBufLoader = (file: string) => ByteBuf

export class Tables {
    private _TbItem: demo.TbItem
    get TbItem(): demo.TbItem  { return this._TbItem;}
    private _lover_poker: lover_poker
    get lover_poker(): lover_poker  { return this._lover_poker;}
    private _Tbhero: Tbhero
    get Tbhero(): Tbhero  { return this._Tbhero;}

    static getTableNames(): string[] {
        let names: string[] = [];
        names.push('demo_tbitem');
        names.push('lover_poker');
        names.push('tbhero');
        return names;
    }

    constructor(loader: ByteBufLoader) {
        this._TbItem = new demo.TbItem(loader('demo_tbitem'))
        this._lover_poker = new lover_poker(loader('lover_poker'))
        this._Tbhero = new Tbhero(loader('tbhero'))

        this._TbItem.resolve(this)
        this._lover_poker.resolve(this)
        this._Tbhero.resolve(this)
    }
}

