
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------






export namespace demo {
export class Item {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.desc === undefined) { throw new Error() }
        this.desc = _json_.desc
        if (_json_.count === undefined) { throw new Error() }
        this.count = _json_.count
    }

    /**
     * id
     */
    readonly id: number
    /**
     * 名称
     */
    readonly name: string
    /**
     * 描述
     */
    readonly desc: string
    /**
     * 个数
     */
    readonly count: number

    resolve(tables:Tables) {
        
        
        
        
    }
}

}



export class hero {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.name === undefined) { throw new Error() }
        this.name = _json_.name
        if (_json_.camp === undefined) { throw new Error() }
        this.camp = _json_.camp
        if (_json_.quality === undefined) { throw new Error() }
        this.quality = _json_.quality
        if (_json_.type === undefined) { throw new Error() }
        this.type = _json_.type
        if (_json_.atk === undefined) { throw new Error() }
        this.atk = _json_.atk
        if (_json_.int === undefined) { throw new Error() }
        this.int = _json_.int
        if (_json_.def === undefined) { throw new Error() }
        this.def = _json_.def
        if (_json_.hp === undefined) { throw new Error() }
        this.hp = _json_.hp
        if (_json_.crt === undefined) { throw new Error() }
        this.crt = _json_.crt
        if (_json_.attack_speed === undefined) { throw new Error() }
        this.attackSpeed = _json_.attack_speed
        if (_json_.battle_range === undefined) { throw new Error() }
        this.battleRange = _json_.battle_range
        if (_json_.personality === undefined) { throw new Error() }
        this.personality = _json_.personality
        if (_json_.sex === undefined) { throw new Error() }
        this.sex = _json_.sex
        if (_json_.collision_size === undefined) { throw new Error() }
        this.collisionSize = _json_.collision_size
        if (_json_.speed === undefined) { throw new Error() }
        this.speed = _json_.speed
        if (_json_.skill === undefined) { throw new Error() }
        { this.skill = []; for(let _ele0 of _json_.skill) { let _e0; _e0 = _ele0; this.skill.push(_e0);}}
        if (_json_.fit_skill === undefined) { throw new Error() }
        { this.fitSkill = []; for(let _ele0 of _json_.fit_skill) { let _e0; _e0 = _ele0; this.fitSkill.push(_e0);}}
        if (_json_.soldier_id === undefined) { throw new Error() }
        this.soldierId = _json_.soldier_id
        if (_json_.skin === undefined) { throw new Error() }
        this.skin = _json_.skin
        if (_json_.hero_type === undefined) { throw new Error() }
        this.heroType = _json_.hero_type
        if (_json_.initialstar === undefined) { throw new Error() }
        this.initialstar = _json_.initialstar
        if (_json_.merge_item === undefined) { throw new Error() }
        this.mergeItem = _json_.merge_item
        if (_json_.power === undefined) { throw new Error() }
        this.power = _json_.power
        if (_json_.element === undefined) { throw new Error() }
        this.element = _json_.element
        if (_json_.hero_area === undefined) { throw new Error() }
        this.heroArea = _json_.hero_area
    }

    /**
     * 英雄ID
     */
    readonly id: number
    /**
     * 名称
     */
    readonly name: string
    /**
     * 阵营
     */
    readonly camp: number
    /**
     * 稀有度
     */
    readonly quality: string
    /**
     * 卡牌类型
     */
    readonly type: number
    /**
     * 武力
     */
    readonly atk: number
    /**
     * 智力
     */
    readonly int: number
    /**
     * 耐力
     */
    readonly def: number
    /**
     * 体质
     */
    readonly hp: number
    /**
     * 暴击率
     */
    readonly crt: number
    /**
     * 攻击速度
     */
    readonly attackSpeed: number
    /**
     * 攻击范围（像素）
     */
    readonly battleRange: number
    /**
     * 性格
     */
    readonly personality: number
    /**
     * 性别
     */
    readonly sex: number
    /**
     * 碰撞大小
     */
    readonly collisionSize: number
    /**
     * 移速
     */
    readonly speed: number
    /**
     * 技能
     */
    readonly skill: number[]
    /**
     * 合体技能
     */
    readonly fitSkill: number[]
    /**
     * 带领兵种
     */
    readonly soldierId: number
    /**
     * 皮肤ID
     */
    readonly skin: number
    /**
     * 英雄类型
     */
    readonly heroType: number
    /**
     * 初始星级
     */
    readonly initialstar: number
    /**
     * 武将碎片
     */
    readonly mergeItem: number
    /**
     * 初始战力
     */
    readonly power: number
    /**
     * 五行元素
     */
    readonly element: number
    /**
     * 武将出生地
     */
    readonly heroArea: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class loverpocker {

    constructor(_json_: any) {
        if (_json_.hole_cards === undefined) { throw new Error() }
        this.holeCards = _json_.hole_cards
        if (_json_.strength === undefined) { throw new Error() }
        this.strength = _json_.strength
        if (_json_.flop1_aiWin_check === undefined) { throw new Error() }
        this.flop1AiWinCheck = _json_.flop1_aiWin_check
        if (_json_.flop1_aiWin_raise === undefined) { throw new Error() }
        this.flop1AiWinRaise = _json_.flop1_aiWin_raise
        if (_json_.flop1_aiWin_raise_size === undefined) { throw new Error() }
        this.flop1AiWinRaiseSize = _json_.flop1_aiWin_raise_size
        if (_json_.flop1_aiLose_check === undefined) { throw new Error() }
        this.flop1AiLoseCheck = _json_.flop1_aiLose_check
        if (_json_.flop1_aiLose_raise === undefined) { throw new Error() }
        this.flop1AiLoseRaise = _json_.flop1_aiLose_raise
        if (_json_.flop1_aiLose_raise_size === undefined) { throw new Error() }
        this.flop1AiLoseRaiseSize = _json_.flop1_aiLose_raise_size
        if (_json_.flop2_aiWin_fold === undefined) { throw new Error() }
        this.flop2AiWinFold = _json_.flop2_aiWin_fold
        if (_json_.flop2_aiWin_call === undefined) { throw new Error() }
        this.flop2AiWinCall = _json_.flop2_aiWin_call
        if (_json_.flop2_aiWin_raise === undefined) { throw new Error() }
        this.flop2AiWinRaise = _json_.flop2_aiWin_raise
        if (_json_.flop2_aiWin_raise_size === undefined) { throw new Error() }
        this.flop2AiWinRaiseSize = _json_.flop2_aiWin_raise_size
        if (_json_.flop2_aiLose_fold === undefined) { throw new Error() }
        this.flop2AiLoseFold = _json_.flop2_aiLose_fold
        if (_json_.flop2_aiLose_call === undefined) { throw new Error() }
        this.flop2AiLoseCall = _json_.flop2_aiLose_call
        if (_json_.flop2_aiLose_raise === undefined) { throw new Error() }
        this.flop2AiLoseRaise = _json_.flop2_aiLose_raise
        if (_json_.flop2_aiLose_raise_size === undefined) { throw new Error() }
        this.flop2AiLoseRaiseSize = _json_.flop2_aiLose_raise_size
        if (_json_.other1_aiWin_check === undefined) { throw new Error() }
        this.other1AiWinCheck = _json_.other1_aiWin_check
        if (_json_.other1_aiWin_bet === undefined) { throw new Error() }
        this.other1AiWinBet = _json_.other1_aiWin_bet
        if (_json_.other1_aiWin_bet_size === undefined) { throw new Error() }
        this.other1AiWinBetSize = _json_.other1_aiWin_bet_size
        if (_json_.other1_aiLose_check === undefined) { throw new Error() }
        this.other1AiLoseCheck = _json_.other1_aiLose_check
        if (_json_.other1_aiLose_bet === undefined) { throw new Error() }
        this.other1AiLoseBet = _json_.other1_aiLose_bet
        if (_json_.other1_aiLose_bet_size === undefined) { throw new Error() }
        this.other1AiLoseBetSize = _json_.other1_aiLose_bet_size
        if (_json_.other2_aiWin_fold === undefined) { throw new Error() }
        this.other2AiWinFold = _json_.other2_aiWin_fold
        if (_json_.other2_aiWin_call === undefined) { throw new Error() }
        this.other2AiWinCall = _json_.other2_aiWin_call
        if (_json_.other2_aiWin_raise === undefined) { throw new Error() }
        this.other2AiWinRaise = _json_.other2_aiWin_raise
        if (_json_.other2_aiWin_raise_size === undefined) { throw new Error() }
        this.other2AiWinRaiseSize = _json_.other2_aiWin_raise_size
        if (_json_.other2_aiLose_fold === undefined) { throw new Error() }
        this.other2AiLoseFold = _json_.other2_aiLose_fold
        if (_json_.other2_aiLose_call === undefined) { throw new Error() }
        this.other2AiLoseCall = _json_.other2_aiLose_call
        if (_json_.other2_aiLose_raise === undefined) { throw new Error() }
        this.other2AiLoseRaise = _json_.other2_aiLose_raise
        if (_json_.other2_aiLose_raise_size === undefined) { throw new Error() }
        this.other2AiLoseRaiseSize = _json_.other2_aiLose_raise_size
    }

    /**
     * 手牌
     */
    readonly holeCards: string
    /**
     * 强度值
     */
    readonly strength: number
    /**
     * 翻牌轮AI赢-过牌万分比
     */
    readonly flop1AiWinCheck: number
    /**
     * 翻牌轮AI赢-加注万分比
     */
    readonly flop1AiWinRaise: number
    /**
     * 翻牌轮AI赢-极限加倍数
     */
    readonly flop1AiWinRaiseSize: number
    /**
     * 翻牌轮AI输-过牌万分比
     */
    readonly flop1AiLoseCheck: number
    /**
     * 翻牌轮AI输-加注万分比
     */
    readonly flop1AiLoseRaise: number
    /**
     * 翻牌轮AI输-极限加倍数
     */
    readonly flop1AiLoseRaiseSize: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai弃牌万分比
     */
    readonly flop2AiWinFold: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai跟注万分比
     */
    readonly flop2AiWinCall: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai再加注万分比
     */
    readonly flop2AiWinRaise: number
    /**
     * 翻牌轮AI赢-玩家加注或再加注后-ai再加注极限倍数
     */
    readonly flop2AiWinRaiseSize: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai弃牌万分比
     */
    readonly flop2AiLoseFold: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai跟注万分比
     */
    readonly flop2AiLoseCall: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai再加注万分比
     */
    readonly flop2AiLoseRaise: number
    /**
     * 翻牌轮AI输-玩家加注或再加注后-ai极限再加倍数
     */
    readonly flop2AiLoseRaiseSize: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI过牌万分比
     */
    readonly other1AiWinCheck: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI下注万分比
     */
    readonly other1AiWinBet: number
    /**
     * 其它轮次AI赢-玩家过牌后-AI下注极限倍数
     */
    readonly other1AiWinBetSize: number
    /**
     * 其它轮次AI输-玩家过牌后-AI过牌万分比
     */
    readonly other1AiLoseCheck: number
    /**
     * 其它轮次AI输-玩家过牌后-AI下注万分比
     */
    readonly other1AiLoseBet: number
    /**
     * 其它轮次AI输-玩家过牌后-AI下注极限倍数
     */
    readonly other1AiLoseBetSize: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI过牌万分比
     */
    readonly other2AiWinFold: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI跟注万分比
     */
    readonly other2AiWinCall: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI加注万分比
     */
    readonly other2AiWinRaise: number
    /**
     * 其它轮次AI赢-玩家下注/加注/再加注后-AI加注极限倍数
     */
    readonly other2AiWinRaiseSize: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI过牌万分比
     */
    readonly other2AiLoseFold: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI跟注万分比
     */
    readonly other2AiLoseCall: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI加注万分比
     */
    readonly other2AiLoseRaise: number
    /**
     * 其它轮次AI输-玩家下注/加注/再加注后-AI加注极限倍数
     */
    readonly other2AiLoseRaiseSize: number

    resolve(tables:Tables) {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
}





export class vector2 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
    }

    readonly x: number
    readonly y: number

    resolve(tables:Tables) {
        
        
    }
}





export class vector3 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
    }

    readonly x: number
    readonly y: number
    readonly z: number

    resolve(tables:Tables) {
        
        
        
    }
}





export class vector4 {

    constructor(_json_: any) {
        if (_json_.x === undefined) { throw new Error() }
        this.x = _json_.x
        if (_json_.y === undefined) { throw new Error() }
        this.y = _json_.y
        if (_json_.z === undefined) { throw new Error() }
        this.z = _json_.z
        if (_json_.w === undefined) { throw new Error() }
        this.w = _json_.w
    }

    readonly x: number
    readonly y: number
    readonly z: number
    readonly w: number

    resolve(tables:Tables) {
        
        
        
        
    }
}





export namespace demo {
export class TbItem {
    private _dataMap: Map<number, demo.Item>
    private _dataList: demo.Item[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, demo.Item>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: demo.Item
            _v = new demo.Item(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, demo.Item> { return this._dataMap; }
    getDataList(): demo.Item[] { return this._dataList; }

    get(key: number): demo.Item | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}



export class lover_poker {
    private _dataMap: Map<string, loverpocker>
    private _dataList: loverpocker[]
    constructor(_json_: any) {
        this._dataMap = new Map<string, loverpocker>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: loverpocker
            _v = new loverpocker(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.holeCards, _v)
        }
    }

    getDataMap(): Map<string, loverpocker> { return this._dataMap; }
    getDataList(): loverpocker[] { return this._dataList; }

    get(key: string): loverpocker | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




export class Tbhero {
    private _dataMap: Map<number, hero>
    private _dataList: hero[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, hero>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: hero
            _v = new hero(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<number, hero> { return this._dataMap; }
    getDataList(): hero[] { return this._dataList; }

    get(key: number): hero | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}




type JsonLoader = (file: string) => any

export class Tables {
    private _TbItem: demo.TbItem
    get TbItem(): demo.TbItem  { return this._TbItem;}
    private _lover_poker: lover_poker
    get lover_poker(): lover_poker  { return this._lover_poker;}
    private _Tbhero: Tbhero
    get Tbhero(): Tbhero  { return this._Tbhero;}

    constructor(loader: JsonLoader) {
        this._TbItem = new demo.TbItem(loader('demo_tbitem'))
        this._lover_poker = new lover_poker(loader('lover_poker'))
        this._Tbhero = new Tbhero(loader('tbhero'))

        this._TbItem.resolve(this)
        this._lover_poker.resolve(this)
        this._Tbhero.resolve(this)
    }
}

